
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\007\000\002\003\004\000\002\004\006" +
    "\000\002\005\004\000\002\005\002\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\004\000\002\007\004\000\002\010\006\000\002\010" +
    "\007\000\002\010\004\000\002\011\003\000\002\011\003" +
    "\000\002\012\005\000\002\013\005\000\002\013\007\000" +
    "\002\013\004\000\002\014\003\000\002\014\005\000\002" +
    "\016\010\000\002\016\004\000\002\021\012\000\002\017" +
    "\005\000\002\017\002\000\002\020\005\000\002\020\007" +
    "\000\002\020\004\000\002\015\003\000\002\015\003\000" +
    "\002\022\003\000\002\022\004\000\002\040\003\000\002" +
    "\040\003\000\002\023\004\000\002\023\004\000\002\023" +
    "\010\000\002\023\006\000\002\023\007\000\002\023\012" +
    "\000\002\023\004\000\002\023\004\000\002\031\004\000" +
    "\002\032\005\000\002\032\002\000\002\033\003\000\002" +
    "\033\005\000\002\033\004\000\002\024\005\000\002\025" +
    "\005\000\002\025\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\026\003\000\002\026\005\000\002" +
    "\026\003\000\002\034\005\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\005\000\002\036\005" +
    "\000\002\036\004\000\002\036\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\010\003\006\004\010\054\007\001\002\000" +
    "\004\002\245\001\002\000\004\002\000\001\002\000\004" +
    "\011\244\001\002\000\004\006\240\001\002\000\004\006" +
    "\011\001\002\000\004\011\012\001\002\000\016\003\ufffa" +
    "\017\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\001\002\000" +
    "\016\003\024\017\030\022\020\023\023\025\017\026\021" +
    "\001\002\000\004\010\015\001\002\000\004\002\uffff\001" +
    "\002\000\020\003\ufffb\010\ufffb\017\ufffb\022\ufffb\023\ufffb" +
    "\025\ufffb\026\ufffb\001\002\000\004\006\231\001\002\000" +
    "\016\003\115\006\113\042\107\045\114\047\106\051\117" +
    "\001\002\000\004\006\067\001\002\000\020\003\ufff7\010" +
    "\ufff7\017\ufff7\022\ufff7\023\ufff7\025\ufff7\026\ufff7\001\002" +
    "\000\006\003\051\006\050\001\002\000\010\003\051\006" +
    "\050\011\053\001\002\000\020\003\ufff6\010\ufff6\017\ufff6" +
    "\022\ufff6\023\ufff6\025\ufff6\026\ufff6\001\002\000\020\003" +
    "\ufff9\010\ufff9\017\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9" +
    "\001\002\000\020\003\ufff8\010\ufff8\017\ufff8\022\ufff8\023" +
    "\ufff8\025\ufff8\026\ufff8\001\002\000\006\003\032\006\033" +
    "\001\002\000\004\012\046\001\002\000\004\011\045\001" +
    "\002\000\006\012\uffea\013\043\001\002\000\004\011\035" +
    "\001\002\000\022\003\uffee\006\033\010\uffee\017\uffee\022" +
    "\uffee\023\uffee\025\uffee\026\uffee\001\002\000\004\012\037" +
    "\001\002\000\006\021\042\024\040\001\002\000\006\011" +
    "\uffe0\015\uffe0\001\002\000\004\011\uffec\001\002\000\006" +
    "\011\uffdf\015\uffdf\001\002\000\004\006\033\001\002\000" +
    "\004\012\uffe9\001\002\000\004\011\uffeb\001\002\000\006" +
    "\021\042\024\040\001\002\000\004\011\uffed\001\002\000" +
    "\004\005\063\001\002\000\004\011\062\001\002\000\022" +
    "\003\ufff4\006\054\010\ufff4\017\ufff4\022\ufff4\023\ufff4\025" +
    "\ufff4\026\ufff4\001\002\000\020\003\uffe7\010\uffe7\017\uffe7" +
    "\022\uffe7\023\uffe7\025\uffe7\026\uffe7\001\002\000\004\005" +
    "\055\001\002\000\006\007\060\020\056\001\002\000\050" +
    "\005\ufff0\011\ufff0\013\ufff0\015\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\044\ufff0\046\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\001" +
    "\002\000\004\011\061\001\002\000\050\005\uffef\011\uffef" +
    "\013\uffef\015\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\044\uffef\046\uffef" +
    "\052\uffef\053\uffef\055\uffef\056\uffef\001\002\000\022\003" +
    "\ufff2\006\ufff2\010\ufff2\017\ufff2\022\ufff2\023\ufff2\025\ufff2" +
    "\026\ufff2\001\002\000\022\003\ufff1\006\ufff1\010\ufff1\017" +
    "\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\001\002\000\006" +
    "\007\060\020\056\001\002\000\004\011\065\001\002\000" +
    "\022\003\ufff3\006\ufff3\010\ufff3\017\ufff3\022\ufff3\023\ufff3" +
    "\025\ufff3\026\ufff3\001\002\000\022\003\ufff5\006\054\010" +
    "\ufff5\017\ufff5\022\ufff5\023\ufff5\025\ufff5\026\ufff5\001\002" +
    "\000\006\011\uffe4\014\070\001\002\000\006\003\077\006" +
    "\033\001\002\000\004\011\072\001\002\000\016\003\ufffa" +
    "\017\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\001\002\000" +
    "\004\011\074\001\002\000\020\003\uffe8\010\uffe8\017\uffe8" +
    "\022\uffe8\023\uffe8\025\uffe8\026\uffe8\001\002\000\004\015" +
    "\105\001\002\000\004\012\101\001\002\000\004\015\100" +
    "\001\002\000\004\015\uffe1\001\002\000\006\021\042\024" +
    "\040\001\002\000\006\011\103\015\uffe3\001\002\000\006" +
    "\003\077\006\033\001\002\000\004\015\uffe2\001\002\000" +
    "\006\011\uffe5\012\uffe5\001\002\000\016\003\ufffa\017\ufffa" +
    "\022\ufffa\023\ufffa\025\ufffa\026\ufffa\001\002\000\016\003" +
    "\166\006\125\007\060\014\164\020\056\041\167\001\002" +
    "\000\020\003\115\006\113\016\217\042\107\045\114\047" +
    "\106\051\117\001\002\000\020\003\uffde\006\uffde\016\uffde" +
    "\042\uffde\045\uffde\047\uffde\051\uffde\001\002\000\004\011" +
    "\215\001\002\000\010\011\uffd0\014\146\027\213\001\002" +
    "\000\016\003\166\006\125\007\060\014\164\020\056\041" +
    "\167\001\002\000\006\011\162\016\163\001\002\000\004" +
    "\011\161\001\002\000\004\006\120\001\002\000\004\027" +
    "\121\001\002\000\012\006\125\007\060\014\123\020\056" +
    "\001\002\000\050\005\uffca\011\uffca\013\uffca\015\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\044\uffca\046\uffca\052\uffca\053\uffca\055" +
    "\uffca\056\uffca\001\002\000\012\006\125\007\060\014\123" +
    "\020\056\001\002\000\050\005\uffc1\011\uffc1\013\uffc1\015" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\044\uffc1\046\uffc1\052\uffc1\053" +
    "\uffc1\055\uffc1\056\uffc1\001\002\000\052\005\uffd0\011\uffd0" +
    "\013\uffd0\014\146\015\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\044\uffd0" +
    "\046\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\001\002\000" +
    "\020\030\133\031\131\032\140\033\134\034\135\052\141" +
    "\053\137\001\002\000\050\005\uffc3\011\uffc3\013\uffc3\015" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\044\uffc3\046\uffc3\052\uffc3\053" +
    "\uffc3\055\uffc3\056\uffc3\001\002\000\012\006\125\007\060" +
    "\014\123\020\056\001\002\000\012\006\uffc7\007\uffc7\014" +
    "\uffc7\020\uffc7\001\002\000\012\006\uffc9\007\uffc9\014\uffc9" +
    "\020\uffc9\001\002\000\012\006\uffc8\007\uffc8\014\uffc8\020" +
    "\uffc8\001\002\000\012\006\uffc5\007\uffc5\014\uffc5\020\uffc5" +
    "\001\002\000\012\006\uffc4\007\uffc4\014\uffc4\020\uffc4\001" +
    "\002\000\012\006\125\007\060\014\123\020\056\001\002" +
    "\000\012\006\uffdb\007\uffdb\014\uffdb\020\uffdb\001\002\000" +
    "\012\006\uffc6\007\uffc6\014\uffc6\020\uffc6\001\002\000\012" +
    "\006\uffdc\007\uffdc\014\uffdc\020\uffdc\001\002\000\016\030" +
    "\133\031\131\032\140\033\134\034\135\046\143\001\002" +
    "\000\016\003\ufffa\017\ufffa\022\ufffa\023\ufffa\025\ufffa\026" +
    "\ufffa\001\002\000\020\003\uffd5\006\uffd5\016\uffd5\042\uffd5" +
    "\045\uffd5\047\uffd5\051\uffd5\001\002\000\050\005\uffcb\011" +
    "\uffcb\013\uffcb\015\uffcb\030\133\031\131\032\140\033\134" +
    "\034\135\035\uffcb\036\uffcb\037\uffcb\040\uffcb\044\uffcb\046" +
    "\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\001\002\000\014" +
    "\003\150\006\125\007\060\014\123\020\056\001\002\000" +
    "\050\005\uffd2\011\uffd2\013\uffd2\015\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\044\uffd2\046\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\001\002\000\004\015\156\001\002\000\020\013\154\015" +
    "\uffcf\030\133\031\131\032\140\033\134\034\135\001\002" +
    "\000\004\015\153\001\002\000\050\005\uffd1\011\uffd1\013" +
    "\uffd1\015\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\044\uffd1\046\uffd1\052" +
    "\uffd1\053\uffd1\055\uffd1\056\uffd1\001\002\000\014\003\150" +
    "\006\125\007\060\014\123\020\056\001\002\000\004\015" +
    "\uffce\001\002\000\004\015\uffcd\001\002\000\016\015\160" +
    "\030\133\031\131\032\140\033\134\034\135\001\002\000" +
    "\050\005\uffc2\011\uffc2\013\uffc2\015\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\044\uffc2\046\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2" +
    "\001\002\000\020\003\uffd9\006\uffd9\016\uffd9\042\uffd9\045" +
    "\uffd9\047\uffd9\051\uffd9\001\002\000\020\003\uffd4\006\uffd4" +
    "\016\uffd4\042\uffd4\045\uffd4\047\uffd4\051\uffd4\001\002\000" +
    "\020\003\uffd3\006\uffd3\016\uffd3\042\uffd3\045\uffd3\047\uffd3" +
    "\051\uffd3\001\002\000\012\006\125\007\060\014\123\020" +
    "\056\001\002\000\014\011\uffbf\044\uffbf\046\uffbf\055\uffbf" +
    "\056\uffbf\001\002\000\004\015\210\001\002\000\016\003" +
    "\166\006\125\007\060\014\164\020\056\041\167\001\002" +
    "\000\026\005\205\030\133\031\131\032\140\033\134\034" +
    "\135\035\204\036\201\037\200\040\202\001\002\000\010" +
    "\046\172\055\174\056\175\001\002\000\016\003\ufffa\017" +
    "\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\001\002\000\016" +
    "\003\166\006\125\007\060\014\164\020\056\041\167\001" +
    "\002\000\016\003\uffbe\006\uffbe\007\uffbe\014\uffbe\020\uffbe" +
    "\041\uffbe\001\002\000\016\003\uffbd\006\uffbd\007\uffbd\014" +
    "\uffbd\020\uffbd\041\uffbd\001\002\000\014\011\uffc0\044\uffc0" +
    "\046\uffc0\055\174\056\175\001\002\000\020\003\uffd7\006" +
    "\uffd7\016\uffd7\042\uffd7\045\uffd7\047\uffd7\051\uffd7\001\002" +
    "\000\012\006\uffb5\007\uffb5\014\uffb5\020\uffb5\001\002\000" +
    "\012\006\uffb8\007\uffb8\014\uffb8\020\uffb8\001\002\000\012" +
    "\006\uffb6\007\uffb6\014\uffb6\020\uffb6\001\002\000\012\006" +
    "\125\007\060\014\123\020\056\001\002\000\012\006\uffb7" +
    "\007\uffb7\014\uffb7\020\uffb7\001\002\000\012\006\uffb4\007" +
    "\uffb4\014\uffb4\020\uffb4\001\002\000\026\011\uffbc\030\133" +
    "\031\131\032\140\033\134\034\135\044\uffbc\046\uffbc\055" +
    "\uffbc\056\uffbc\001\002\000\014\011\uffba\044\uffba\046\uffba" +
    "\055\uffba\056\uffba\001\002\000\014\011\uffb9\044\uffb9\046" +
    "\uffb9\055\uffb9\056\uffb9\001\002\000\016\015\212\030\133" +
    "\031\131\032\140\033\134\034\135\001\002\000\040\005" +
    "\uffc2\011\uffbb\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\044\uffbb\046\uffbb\055" +
    "\uffbb\056\uffbb\001\002\000\012\006\125\007\060\014\123" +
    "\020\056\001\002\000\016\011\uffcc\030\133\031\131\032" +
    "\140\033\134\034\135\001\002\000\020\003\uffda\006\uffda" +
    "\016\uffda\042\uffda\045\uffda\047\uffda\051\uffda\001\002\000" +
    "\020\003\uffdd\006\uffdd\016\uffdd\042\uffdd\045\uffdd\047\uffdd" +
    "\051\uffdd\001\002\000\030\003\ufffc\006\ufffc\010\ufffc\011" +
    "\ufffc\016\ufffc\042\ufffc\043\ufffc\045\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\001\002\000\010\044\221\055\174\056\175\001" +
    "\002\000\016\003\ufffa\017\ufffa\022\ufffa\023\ufffa\025\ufffa" +
    "\026\ufffa\001\002\000\004\043\223\001\002\000\016\003" +
    "\ufffa\017\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\001\002" +
    "\000\020\003\uffd8\006\uffd8\016\uffd8\042\uffd8\045\uffd8\047" +
    "\uffd8\051\uffd8\001\002\000\004\050\226\001\002\000\016" +
    "\003\166\006\125\007\060\014\164\020\056\041\167\001" +
    "\002\000\010\011\230\055\174\056\175\001\002\000\020" +
    "\003\uffd6\006\uffd6\016\uffd6\042\uffd6\045\uffd6\047\uffd6\051" +
    "\uffd6\001\002\000\006\012\uffe4\014\070\001\002\000\004" +
    "\012\233\001\002\000\006\021\042\024\040\001\002\000" +
    "\004\011\235\001\002\000\016\003\ufffa\017\ufffa\022\ufffa" +
    "\023\ufffa\025\ufffa\026\ufffa\001\002\000\004\011\237\001" +
    "\002\000\020\003\uffe6\010\uffe6\017\uffe6\022\uffe6\023\uffe6" +
    "\025\uffe6\026\uffe6\001\002\000\004\011\241\001\002\000" +
    "\016\003\ufffa\010\ufffa\017\ufffa\023\ufffa\025\ufffa\026\ufffa" +
    "\001\002\000\016\003\024\010\243\017\030\023\023\025" +
    "\017\026\021\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\013\005" +
    "\012\001\001\000\014\006\015\007\025\012\026\016\021" +
    "\021\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\107\023\110" +
    "\024\111\031\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\065\001\001\000\004\010\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\033\014\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\035\001\001\000\002\001\001\000\004\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\070" +
    "\001\001\000\006\014\075\020\074\001\001\000\002\001" +
    "\001\000\006\004\072\005\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\101\001\001" +
    "\000\002\001\001\000\006\014\075\020\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\224\005\012" +
    "\001\001\000\016\011\126\025\167\026\121\031\123\034" +
    "\217\036\164\001\001\000\010\023\215\024\111\031\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\146\001\001\000\016\011\126\025\167\026\121\031\123" +
    "\034\170\036\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\126" +
    "\025\125\026\121\031\123\001\001\000\002\001\001\000" +
    "\012\011\126\025\156\026\121\031\123\001\001\000\002" +
    "\001\001\000\004\032\146\001\001\000\010\027\127\030" +
    "\131\040\135\001\001\000\002\001\001\000\012\011\126" +
    "\025\144\026\121\031\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\126\025\141\026\121\031\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\127\030\131\001\001\000\006\004\143\005" +
    "\012\001\001\000\002\001\001\000\006\027\127\030\131" +
    "\001\001\000\014\011\126\025\150\026\121\031\123\033" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\127\030\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\126\025\150\026\121\031\123\033\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\127\030\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\126\025" +
    "\210\026\121\031\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\126\025\167\026\121\031\123\036" +
    "\206\001\001\000\010\027\127\030\131\037\202\001\001" +
    "\000\004\035\172\001\001\000\006\004\176\005\012\001" +
    "\001\000\016\011\126\025\167\026\121\031\123\034\175" +
    "\036\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\126\025" +
    "\205\026\121\031\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\127\030\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\127\030\131\001\001" +
    "\000\002\001\001\000\012\011\126\025\213\026\121\031" +
    "\123\001\001\000\006\027\127\030\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\172\001\001\000\006\004\221\005\012\001\001\000\002" +
    "\001\001\000\006\004\223\005\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\126\025\167\026\121" +
    "\031\123\034\226\036\164\001\001\000\004\035\172\001" +
    "\001\000\002\001\001\000\004\017\231\001\001\000\002" +
    "\001\001\000\004\015\233\001\001\000\002\001\001\000" +
    "\006\004\235\005\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\241\001\001\000" +
    "\014\006\015\007\025\012\026\016\021\021\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Converter c = new Converter();
    private String globalVariables = "";
    public void syntax_error(Symbol s){
        try{
            Token token = (Token)s.value;

            String lex = token.getLex();
            int line = token.getLine();
            int column = token.getColumn();

            System.out.println("Error sintactico capturado");
            System.out.println("\t\tLexema: " + lex);
            System.out.println("\t\tFila: " + line);
            System.out.println("\t\tColumna: " + column);
        }catch(NullPointerException e){System.out.println("Error sintáctico: falta el último símbolo");}
    }

    public void unrecovered_syntax_error(Symbol s){
         try{
             Token token = (Token)s.value;

             String lex = token.getLex();
             int line = token.getLine();
             int column = token.getColumn();

             System.out.println("Error sintactico capturado");
             System.out.println("\t\tLexema: " + lex);
             System.out.println("\t\tFila: " + line);
             System.out.println("\t\tColumna: " + column);
         }catch(NullPointerException e){System.out.println("Error sintáctico: falta el último símbolo");}
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INITIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INITIAL ::= PRG 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.bw.write((String)txt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INITIAL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= cabecera identifier puntoComa BLQ punto 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = txt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= paquete identifier puntoComa DCLLIST punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRG ::= error puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLQ ::= DCLLIST inicio SENTLIST fin 
            {
              Object RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String blq = "void main ( void )\n{\n" + globalVariables + "\n" + sent + "}";
                String dcllist = (String)dcl;
                RESULT = dcllist + "\n" + blq;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dcllist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dcl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)dcllist + (String)dcl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCLLIST ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFCTE 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = def; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFVAR 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 globalVariables = globalVariables + (String)vars; RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFPROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFFUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFCTE ::= constant CTELIST 
            {
              Object RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cte; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEFCTE ::= error CTELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Token token = (Token)id;
                RESULT = "#define " + token.getLex() + " = "  + value + ";\n";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Token token = (Token)id;
                RESULT = list + "#define " + token.getLex() + " = "  + value + ";\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CTELIST ::= error puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIMPVALUE ::= constanteReal 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Token token = (Token)r; RESULT = token.getLex(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIMPVALUE ::= constanteEntera 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Token token = (Token)i; RESULT = token.getLex(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFVAR ::= var DEFVARLIST puntoComa 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "\t" + (String)type + (String)list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;
		int deflistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int deflistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object deflist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = deflist + ";\n" + "\t" + (String)type + (String)list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFVARLIST ::= error puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARLIST ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token token = (Token)id; RESULT = token.getLex(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARLIST ::= identifier coma VARLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token token = (Token)id; RESULT = token.getLex() + ", " + list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFPROC ::= procedimiento identifier FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFPROC ::= error puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFFUN ::= funcion identifier FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORMAL_PARAMLIST ::= parentesisAbierto FORMAL_PARAM parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORMAL_PARAM ::= error parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TBAS ::= entero 
            {
              Object RESULT =null;
		 RESULT = "int "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TBAS ::= real 
            {
              Object RESULT =null;
		 RESULT = "float "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTLIST ::= SENT 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INC ::= hastaArriba 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INC ::= hastaAbajo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= ASIG puntoComa 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT ="\t" + asig + ";\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= PROC_CALL puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= si EXPCOND entonces BLQ sino BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= mientras EXPCOND hacer BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= repite BLQ hasta EXPCOND puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= para identifier asignacion EXP INC EXP hacer BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT ::= error puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT ::= error fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SUBPARAMLIST ::= parentesisAbierto EXPLIST parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPLIST ::= error parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIG ::= identifier asignacion EXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Token token = (Token)id; RESULT = token.getLex() + " = " + exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp1 + " " + op + " " + exp2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= FACTOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP ::= OPARIT 
            {
              Object RESULT =null;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oparit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = oparit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPARIT ::= suma 
            {
              Object RESULT =null;
		RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPARIT ::= resta 
            {
              Object RESULT =null;
		RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPARIT ::= producto 
            {
              Object RESULT =null;
		RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPARIT ::= division 
            {
              Object RESULT =null;
		RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPARIT ::= modulo 
            {
              Object RESULT =null;
		RESULT = "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTOR ::= parentesisAbierto EXP parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FACTOR ::= PROC_CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPLOG ::= condO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPLOG ::= condY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACTORCOND ::= parentesisAbierto EXP parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FACTORCOND ::= negacion FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FACTORCOND ::= error parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPCOMP ::= condMenor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPCOMP ::= condMayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPCOMP ::= condMayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPCOMP ::= condMenorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMP ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
