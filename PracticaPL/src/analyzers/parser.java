
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\007\000\002\004\006\000\002\005\004" +
    "\000\002\005\002\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\010\006\000\002\010\007\000\002\011\003\000\002\011" +
    "\003\000\002\012\005\000\002\013\005\000\002\013\007" +
    "\000\002\014\003\000\002\014\005\000\002\016\010\000" +
    "\002\021\012\000\002\017\005\000\002\017\002\000\002" +
    "\020\005\000\002\020\007\000\002\015\003\000\002\015" +
    "\003\000\002\022\003\000\002\022\004\000\002\040\003" +
    "\000\002\040\003\000\002\023\004\000\002\023\004\000" +
    "\002\023\010\000\002\023\006\000\002\023\007\000\002" +
    "\023\012\000\002\031\004\000\002\032\005\000\002\032" +
    "\002\000\002\033\003\000\002\033\005\000\002\024\005" +
    "\000\002\025\005\000\002\025\003\000\002\027\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\026\003\000\002\026" +
    "\005\000\002\026\003\000\002\034\005\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\005\000" +
    "\002\036\005\000\002\036\004\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\004\007\054\006\001\002\000\004\002" +
    "\223\001\002\000\004\002\000\001\002\000\004\006\217" +
    "\001\002\000\004\006\010\001\002\000\004\011\011\001" +
    "\002\000\014\017\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb" +
    "\001\002\000\014\017\026\022\017\023\022\025\016\026" +
    "\020\001\002\000\004\010\014\001\002\000\004\002\uffff" +
    "\001\002\000\016\010\ufffc\017\ufffc\022\ufffc\023\ufffc\025" +
    "\ufffc\026\ufffc\001\002\000\004\006\210\001\002\000\014" +
    "\006\101\042\075\045\102\047\074\051\104\001\002\000" +
    "\004\006\057\001\002\000\016\010\ufff8\017\ufff8\022\ufff8" +
    "\023\ufff8\025\ufff8\026\ufff8\001\002\000\004\006\044\001" +
    "\002\000\016\010\ufff7\017\ufff7\022\ufff7\023\ufff7\025\ufff7" +
    "\026\ufff7\001\002\000\016\010\ufffa\017\ufffa\022\ufffa\023" +
    "\ufffa\025\ufffa\026\ufffa\001\002\000\016\010\ufff9\017\ufff9" +
    "\022\ufff9\023\ufff9\025\ufff9\026\ufff9\001\002\000\004\006" +
    "\030\001\002\000\004\012\042\001\002\000\006\012\uffee" +
    "\013\040\001\002\000\004\011\032\001\002\000\020\006" +
    "\030\010\ufff1\017\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1" +
    "\001\002\000\004\012\034\001\002\000\006\021\037\024" +
    "\035\001\002\000\006\011\uffe6\015\uffe6\001\002\000\004" +
    "\011\uffef\001\002\000\006\011\uffe5\015\uffe5\001\002\000" +
    "\004\006\030\001\002\000\004\012\uffed\001\002\000\006" +
    "\021\037\024\035\001\002\000\004\011\ufff0\001\002\000" +
    "\004\005\054\001\002\000\020\006\046\010\ufff6\017\ufff6" +
    "\022\ufff6\023\ufff6\025\ufff6\026\ufff6\001\002\000\004\005" +
    "\047\001\002\000\006\007\052\020\050\001\002\000\050" +
    "\005\ufff3\011\ufff3\013\ufff3\015\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\044\ufff3\046\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\001" +
    "\002\000\004\011\053\001\002\000\050\005\ufff2\011\ufff2" +
    "\013\ufff2\015\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\044\ufff2\046\ufff2" +
    "\052\ufff2\053\ufff2\055\ufff2\056\ufff2\001\002\000\020\006" +
    "\ufff4\010\ufff4\017\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4" +
    "\001\002\000\006\007\052\020\050\001\002\000\004\011" +
    "\056\001\002\000\020\006\ufff5\010\ufff5\017\ufff5\022\ufff5" +
    "\023\ufff5\025\ufff5\026\ufff5\001\002\000\006\011\uffe9\014" +
    "\060\001\002\000\004\006\030\001\002\000\004\011\062" +
    "\001\002\000\014\017\ufffb\022\ufffb\023\ufffb\025\ufffb\026" +
    "\ufffb\001\002\000\004\011\064\001\002\000\016\010\uffec" +
    "\017\uffec\022\uffec\023\uffec\025\uffec\026\uffec\001\002\000" +
    "\004\015\073\001\002\000\004\012\067\001\002\000\006" +
    "\021\037\024\035\001\002\000\006\011\071\015\uffe8\001" +
    "\002\000\004\006\030\001\002\000\004\015\uffe7\001\002" +
    "\000\006\011\uffea\012\uffea\001\002\000\014\017\ufffb\022" +
    "\ufffb\023\ufffb\025\ufffb\026\ufffb\001\002\000\014\006\112" +
    "\007\052\014\145\020\050\041\147\001\002\000\016\006" +
    "\101\016\176\042\075\045\102\047\074\051\104\001\002" +
    "\000\016\006\uffe4\016\uffe4\042\uffe4\045\uffe4\047\uffe4\051" +
    "\uffe4\001\002\000\004\011\174\001\002\000\010\011\uffd8" +
    "\014\133\027\172\001\002\000\014\006\112\007\052\014" +
    "\145\020\050\041\147\001\002\000\004\011\144\001\002" +
    "\000\004\006\105\001\002\000\004\027\106\001\002\000" +
    "\012\006\112\007\052\014\110\020\050\001\002\000\050" +
    "\005\uffd3\011\uffd3\013\uffd3\015\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\044\uffd3\046\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\001" +
    "\002\000\012\006\112\007\052\014\110\020\050\001\002" +
    "\000\050\005\uffca\011\uffca\013\uffca\015\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\044\uffca\046\uffca\052\uffca\053\uffca\055\uffca\056" +
    "\uffca\001\002\000\052\005\uffd8\011\uffd8\013\uffd8\014\133" +
    "\015\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\044\uffd8\046\uffd8\052\uffd8" +
    "\053\uffd8\055\uffd8\056\uffd8\001\002\000\020\030\120\031" +
    "\116\032\125\033\121\034\122\052\126\053\124\001\002" +
    "\000\050\005\uffcc\011\uffcc\013\uffcc\015\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\044\uffcc\046\uffcc\052\uffcc\053\uffcc\055\uffcc\056" +
    "\uffcc\001\002\000\012\006\112\007\052\014\110\020\050" +
    "\001\002\000\012\006\uffd0\007\uffd0\014\uffd0\020\uffd0\001" +
    "\002\000\012\006\uffd2\007\uffd2\014\uffd2\020\uffd2\001\002" +
    "\000\012\006\uffd1\007\uffd1\014\uffd1\020\uffd1\001\002\000" +
    "\012\006\uffce\007\uffce\014\uffce\020\uffce\001\002\000\012" +
    "\006\uffcd\007\uffcd\014\uffcd\020\uffcd\001\002\000\012\006" +
    "\112\007\052\014\110\020\050\001\002\000\012\006\uffe1" +
    "\007\uffe1\014\uffe1\020\uffe1\001\002\000\012\006\uffcf\007" +
    "\uffcf\014\uffcf\020\uffcf\001\002\000\012\006\uffe2\007\uffe2" +
    "\014\uffe2\020\uffe2\001\002\000\016\030\120\031\116\032" +
    "\125\033\121\034\122\046\130\001\002\000\014\017\ufffb" +
    "\022\ufffb\023\ufffb\025\ufffb\026\ufffb\001\002\000\016\006" +
    "\uffdb\016\uffdb\042\uffdb\045\uffdb\047\uffdb\051\uffdb\001\002" +
    "\000\050\005\uffd4\011\uffd4\013\uffd4\015\uffd4\030\120\031" +
    "\116\032\125\033\121\034\122\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\044\uffd4\046\uffd4\052\uffd4\053\uffd4\055\uffd4\056" +
    "\uffd4\001\002\000\012\006\112\007\052\014\110\020\050" +
    "\001\002\000\050\005\uffda\011\uffda\013\uffda\015\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\044\uffda\046\uffda\052\uffda\053\uffda\055" +
    "\uffda\056\uffda\001\002\000\004\015\141\001\002\000\020" +
    "\013\137\015\uffd7\030\120\031\116\032\125\033\121\034" +
    "\122\001\002\000\012\006\112\007\052\014\110\020\050" +
    "\001\002\000\004\015\uffd6\001\002\000\050\005\uffd9\011" +
    "\uffd9\013\uffd9\015\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\044\uffd9\046" +
    "\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\001\002\000\016" +
    "\015\143\030\120\031\116\032\125\033\121\034\122\001" +
    "\002\000\050\005\uffcb\011\uffcb\013\uffcb\015\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\044\uffcb\046\uffcb\052\uffcb\053\uffcb\055\uffcb" +
    "\056\uffcb\001\002\000\016\006\uffdf\016\uffdf\042\uffdf\045" +
    "\uffdf\047\uffdf\051\uffdf\001\002\000\012\006\112\007\052" +
    "\014\110\020\050\001\002\000\014\011\uffc8\044\uffc8\046" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\014\006\112\007\052" +
    "\014\145\020\050\041\147\001\002\000\026\005\165\030" +
    "\120\031\116\032\125\033\121\034\122\035\164\036\161" +
    "\037\160\040\162\001\002\000\010\046\152\055\154\056" +
    "\155\001\002\000\014\017\ufffb\022\ufffb\023\ufffb\025\ufffb" +
    "\026\ufffb\001\002\000\014\006\112\007\052\014\145\020" +
    "\050\041\147\001\002\000\014\006\uffc7\007\uffc7\014\uffc7" +
    "\020\uffc7\041\uffc7\001\002\000\014\006\uffc6\007\uffc6\014" +
    "\uffc6\020\uffc6\041\uffc6\001\002\000\014\011\uffc9\044\uffc9" +
    "\046\uffc9\055\154\056\155\001\002\000\016\006\uffdd\016" +
    "\uffdd\042\uffdd\045\uffdd\047\uffdd\051\uffdd\001\002\000\012" +
    "\006\uffbf\007\uffbf\014\uffbf\020\uffbf\001\002\000\012\006" +
    "\uffc2\007\uffc2\014\uffc2\020\uffc2\001\002\000\012\006\uffc0" +
    "\007\uffc0\014\uffc0\020\uffc0\001\002\000\012\006\112\007" +
    "\052\014\110\020\050\001\002\000\012\006\uffc1\007\uffc1" +
    "\014\uffc1\020\uffc1\001\002\000\012\006\uffbe\007\uffbe\014" +
    "\uffbe\020\uffbe\001\002\000\026\011\uffc5\030\120\031\116" +
    "\032\125\033\121\034\122\044\uffc5\046\uffc5\055\uffc5\056" +
    "\uffc5\001\002\000\014\011\uffc3\044\uffc3\046\uffc3\055\uffc3" +
    "\056\uffc3\001\002\000\016\015\171\030\120\031\116\032" +
    "\125\033\121\034\122\001\002\000\040\005\uffcb\011\uffc4" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\044\uffc4\046\uffc4\055\uffc4\056\uffc4" +
    "\001\002\000\012\006\112\007\052\014\110\020\050\001" +
    "\002\000\016\011\uffd5\030\120\031\116\032\125\033\121" +
    "\034\122\001\002\000\016\006\uffe0\016\uffe0\042\uffe0\045" +
    "\uffe0\047\uffe0\051\uffe0\001\002\000\016\006\uffe3\016\uffe3" +
    "\042\uffe3\045\uffe3\047\uffe3\051\uffe3\001\002\000\026\006" +
    "\ufffd\010\ufffd\011\ufffd\016\ufffd\042\ufffd\043\ufffd\045\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\001\002\000\010\044\200\055" +
    "\154\056\155\001\002\000\014\017\ufffb\022\ufffb\023\ufffb" +
    "\025\ufffb\026\ufffb\001\002\000\004\043\202\001\002\000" +
    "\014\017\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb\001\002" +
    "\000\016\006\uffde\016\uffde\042\uffde\045\uffde\047\uffde\051" +
    "\uffde\001\002\000\004\050\205\001\002\000\014\006\112" +
    "\007\052\014\145\020\050\041\147\001\002\000\010\011" +
    "\207\055\154\056\155\001\002\000\016\006\uffdc\016\uffdc" +
    "\042\uffdc\045\uffdc\047\uffdc\051\uffdc\001\002\000\006\012" +
    "\uffe9\014\060\001\002\000\004\012\212\001\002\000\006" +
    "\021\037\024\035\001\002\000\004\011\214\001\002\000" +
    "\014\017\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb\001\002" +
    "\000\004\011\216\001\002\000\016\010\uffeb\017\uffeb\022" +
    "\uffeb\023\uffeb\025\uffeb\026\uffeb\001\002\000\004\011\220" +
    "\001\002\000\014\010\ufffb\017\ufffb\023\ufffb\025\ufffb\026" +
    "\ufffb\001\002\000\014\010\222\017\026\023\022\025\016" +
    "\026\020\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\012\005\011\001\001\000" +
    "\014\006\014\007\023\012\024\016\020\021\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\075\023\076\024\077\031\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\030\014\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\032" +
    "\001\001\000\002\001\001\000\004\015\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\040\001\001\000\002\001\001\000\004\015\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\060\001\001\000\006\014\065\020\064" +
    "\001\001\000\002\001\001\000\006\004\062\005\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\067\001\001\000\002\001" +
    "\001\000\006\014\065\020\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\203\005\011\001\001\000" +
    "\016\011\113\025\147\026\106\031\110\034\176\036\145" +
    "\001\001\000\010\023\174\024\077\031\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\133\001\001" +
    "\000\016\011\113\025\147\026\106\031\110\034\150\036" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\113\025\112\026\106\031\110\001" +
    "\001\000\002\001\001\000\012\011\113\025\141\026\106" +
    "\031\110\001\001\000\002\001\001\000\004\032\133\001" +
    "\001\000\010\027\114\030\116\040\122\001\001\000\002" +
    "\001\001\000\012\011\113\025\131\026\106\031\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\113\025" +
    "\126\026\106\031\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\114\030\116\001" +
    "\001\000\006\004\130\005\011\001\001\000\002\001\001" +
    "\000\006\027\114\030\116\001\001\000\014\011\113\025" +
    "\135\026\106\031\110\033\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\114\030\116\001\001\000" +
    "\014\011\113\025\135\026\106\031\110\033\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\114\030" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\113\025\167\026\106\031\110\001\001\000\002\001" +
    "\001\000\014\011\113\025\147\026\106\031\110\036\166" +
    "\001\001\000\010\027\114\030\116\037\162\001\001\000" +
    "\004\035\152\001\001\000\006\004\156\005\011\001\001" +
    "\000\016\011\113\025\147\026\106\031\110\034\155\036" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\113\025\165" +
    "\026\106\031\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\114\030\116\001\001\000\002\001\001" +
    "\000\006\027\114\030\116\001\001\000\002\001\001\000" +
    "\012\011\113\025\172\026\106\031\110\001\001\000\006" +
    "\027\114\030\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\152\001\001\000\006" +
    "\004\200\005\011\001\001\000\002\001\001\000\006\004" +
    "\202\005\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\113\025\147\026\106\031\110\034\205\036" +
    "\145\001\001\000\004\035\152\001\001\000\002\001\001" +
    "\000\004\017\210\001\001\000\002\001\001\000\004\015" +
    "\212\001\001\000\002\001\001\000\006\004\214\005\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\220\001\001\000\014\006\014\007\023" +
    "\012\024\016\020\021\022\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        try{
            Token token = (Token)s.value;

            String lex = token.getLex();
            int line = token.getLine();
            int column = token.getColumn();

            System.out.println("Error sintactico capturado");
            System.out.println("\t\tLexema: " + lex);
            System.out.println("\t\tFila: " + line);
            System.out.println("\t\tColumna: " + column);
        }catch(NullPointerException e){System.out.println("Error sintáctico: falta el último símbolo");}
    }

    public void unrecovered_syntax_error(Symbol s){
         try{
             Token token = (Token)s.value;

             String lex = token.getLex();
             int line = token.getLine();
             int column = token.getColumn();

             System.out.println("Error sintactico capturado");
             System.out.println("\t\tLexema: " + lex);
             System.out.println("\t\tFila: " + line);
             System.out.println("\t\tColumna: " + column);
         }catch(NullPointerException e){System.out.println("Error sintáctico: falta el último símbolo");}
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INITIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INITIAL ::= PRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INITIAL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= cabecera identifier puntoComa BLQ punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= paquete identifier puntoComa DCLLIST punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLQ ::= DCLLIST inicio SENTLIST fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCL ::= DEFPROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFFUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFCTE ::= constant CTELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CTELIST ::= identifier igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CTELIST ::= CTELIST identifier igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SIMPVALUE ::= constanteReal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SIMPVALUE ::= constanteEntera 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFVAR ::= var DEFVARLIST puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFVARLIST ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARLIST ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARLIST ::= identifier coma VARLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFPROC ::= procedimiento identifier FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFFUN ::= funcion identifier FORMAL_PARAMLIST dosPuntos TBAS puntoComa BLQ puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FORMAL_PARAMLIST ::= parentesisAbierto FORMAL_PARAM parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FORMAL_PARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORMAL_PARAM ::= VARLIST dosPuntos TBAS puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TBAS ::= entero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TBAS ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INC ::= hastaArriba 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INC ::= hastaAbajo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= ASIG puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= PROC_CALL puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= si EXPCOND entonces BLQ sino BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= mientras EXPCOND hacer BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= repite BLQ hasta EXPCOND puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= para identifier asignacion EXP INC EXP hacer BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUBPARAMLIST ::= parentesisAbierto EXPLIST parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUBPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIG ::= identifier asignacion EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPARIT ::= suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPARIT ::= resta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPARIT ::= producto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPARIT ::= division 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPARIT ::= modulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FACTOR ::= parentesisAbierto EXP parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FACTOR ::= PROC_CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPCOND ::= EXPCOND OPLOG EXPCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPCOND ::= FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCOND",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPLOG ::= condO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLOG ::= condY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTORCOND ::= EXP OPCOMP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTORCOND ::= parentesisAbierto EXP parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTORCOND ::= negacion FACTORCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTORCOND",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPCOMP ::= condMenor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCOMP ::= condMayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMP ::= condMayorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMP ::= condMenorIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMP ::= igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
