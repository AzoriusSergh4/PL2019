package analyzers;
import java_cup.runtime.Symbol;
import java.io.*;

parser code{:
    public Converter c = new Converter();
    private String globalVariables = "";
    public void syntax_error(Symbol s){
        try{
            Token token = (Token)s.value;

            String lex = token.getLex();
            int line = token.getLine();
            int column = token.getColumn();

            System.out.println("Error sintactico capturado");
            System.out.println("\t\tLexema: " + lex);
            System.out.println("\t\tFila: " + line);
            System.out.println("\t\tColumna: " + column);
        }catch(NullPointerException e){System.out.println("Error sintáctico: falta el último símbolo");}
    }

    public void unrecovered_syntax_error(Symbol s){
         try{
             Token token = (Token)s.value;

             String lex = token.getLex();
             int line = token.getLine();
             int column = token.getColumn();

             System.out.println("Error sintactico capturado");
             System.out.println("\t\tLexema: " + lex);
             System.out.println("\t\tFila: " + line);
             System.out.println("\t\tColumna: " + column);
         }catch(NullPointerException e){System.out.println("Error sintáctico: falta el último símbolo");}
    }
:}

action code{:

:}


terminal cabecera, igual, identifier, constanteEntera, punto, puntoComa, dosPuntos, coma, parentesisAbierto, parentesisCerrado,
            fin, var, constanteReal, real, inicio, constant, entero, funcion, procedimiento, asignacion, suma, resta, producto, division,
            modulo, condMayor, condMenor, condMenorIgual, condMayorIgual, negacion, si, sino, entonces, mientras, hacer, repite, hasta,
            para, hastaArriba, hastaAbajo, paquete, condO, condY, constanteString;

non terminal INITIAL, PRG, BLQ, DCLLIST, DCL, DEFCTE, CTELIST, SIMPVALUE, DEFVAR, DEFVARLIST, VARLIST, TBAS, DEFPROC, FORMAL_PARAMLIST,
             FORMAL_PARAM, DEFFUN, SENTLIST, SENT, ASIG, EXP, FACTOR, OP, OPARIT, PROC_CALL, SUBPARAMLIST, EXPLIST, EXPCOND, OPLOG, FACTORCOND,
             OPCOMP, INC;

precedence left identifier;
precedence left condO, condY; 
precedence left suma, resta;
precedence left producto, division, modulo;

start with INITIAL;

INITIAL ::= PRG:txt {:c.bw.write((String)txt);:};

PRG ::= cabecera identifier puntoComa BLQ:blq punto {: Bloque b = (Bloque)blq; RESULT = b.getDcl() + "void main ( void )\n{\n" + b.getVariable() + b.getSent() + "}"; :}
            | paquete identifier:id puntoComa DCLLIST:list punto {:
                Token token = (Token)id;
                DCLList l = (DCLList)list;
                RESULT = "// Libreria: " + token.getLex() + "\n" + l.getVarslist() + l.getDcllists(); :}
            | error puntoComa;
BLQ ::= DCLLIST:dcl inicio SENTLIST:sent fin{:
                DCLList d = (DCLList)dcl;
                Bloque blq = new Bloque(d.getDcllists(), d.getTabbedVarslist(), (String)sent);
                RESULT = blq;
                :};
DCLLIST ::= DCLLIST:dcllist DCL:dcl {:
           DCLList d = (DCLList)dcllist;
           if(dcl instanceof Variable){
                Variable v = (Variable)dcl;
                d.setVarslist(d.getVarslist() + v.getVars());
           }else{
                d.setDcllists(d.getDcllists() + (String)dcl);
           }
           RESULT = d;
        :}
        |{: RESULT = new DCLList("",""); :};
DCL ::= DEFCTE:def {: RESULT = def; :}
        | DEFVAR:vars {: Variable v = new Variable((String)vars); RESULT = v;:}
        | DEFPROC:proc {: RESULT = proc; :}
        | DEFFUN:fun {: RESULT = fun; :};

DEFCTE ::= constant CTELIST:cte {: RESULT = cte; :}
        | error CTELIST;
CTELIST ::= identifier:id igual SIMPVALUE:value puntoComa {:
                Token token = (Token)id;
                RESULT = "#define " + token.getLex() + " = "  + value + ";\n";
                :}
            | CTELIST:list identifier:id igual SIMPVALUE:value puntoComa{:
                Token token = (Token)id;
                RESULT = list + "#define " + token.getLex() + " = "  + value + ";\n";
            :}
			| error puntoComa;
SIMPVALUE ::= constanteReal:r {:Token token = (Token)r; RESULT = token.getLex(); :}
            | constanteEntera:i {:Token token = (Token)i; RESULT = token.getLex(); :}
            | constanteString:i {:Token token = (Token)i; RESULT = token.getLex(); :};

DEFVAR ::= var DEFVARLIST:list puntoComa{: RESULT = list + ";\n"; :};
DEFVARLIST ::= VARLIST:list dosPuntos TBAS:type {: RESULT = (String)type + (String)list; :}
            | DEFVARLIST:deflist puntoComa VARLIST:list dosPuntos TBAS:type {: RESULT = deflist + ";\n" + (String)type + (String)list; :}
            | error puntoComa;
VARLIST ::= identifier:id {: Token token = (Token)id; RESULT = token.getLex(); :}
            | identifier:id coma VARLIST:list {: Token token = (Token)id; RESULT = token.getLex() + ", " + list; :};

DEFPROC ::= procedimiento identifier:id FORMAL_PARAMLIST:params puntoComa BLQ:blq puntoComa {:
            Bloque b = (Bloque)blq;
            Token i = (Token)id;
            RESULT = "void " + i.getLex() + " " + params + "\n{\n" + b.getDcl() + b.getVariable() + b.getSent() + "}\n";
        :}
        | error puntoComa;
DEFFUN ::= funcion identifier:id FORMAL_PARAMLIST:params dosPuntos TBAS:type puntoComa BLQ:blq puntoComa{:
            Bloque b = (Bloque)blq;
            Token i = (Token)id;
            String old = i.getLex() + " =";
            String block = b.getSent().replaceFirst(old, "return");
            RESULT = type + i.getLex() + " " + params + "\n{\n" + b.getDcl() + b.getVariable() + block + "}\n";
        :};

FORMAL_PARAMLIST ::= parentesisAbierto FORMAL_PARAM:param parentesisCerrado {: RESULT = "(" + param + ")"; :}
        |{:RESULT = "";:};
FORMAL_PARAM ::= VARLIST:list dosPuntos TBAS:type {:
            String l = (String)list;
            l = l.replace(", ", ", "+(String)type);
            RESULT = (String)type + l;
        :}
        | VARLIST:list dosPuntos TBAS:type puntoComa FORMAL_PARAM:params {:
            String l = (String)list;
            l = l.replace(", ", ", "+(String)type);
            RESULT = (String)type + l + ", " + (String)params;
        :}
        | error parentesisCerrado;

TBAS ::= entero {: RESULT = "int "; :}
        | real{: RESULT = "float "; :};

SENTLIST ::= SENT:sent {:RESULT = "\t" + sent;:}
        | SENTLIST:list SENT:sent {: RESULT = (String)list + "\t" + (String)sent; :};

INC ::= hastaArriba {: RESULT = true; :}
        | hastaAbajo {: RESULT = false; :};

SENT ::= ASIG:asig puntoComa {:RESULT = asig + ";\n";:}
        | PROC_CALL:procall puntoComa {: RESULT = (String)procall + ";\n"; :}
        | si EXPCOND:expc entonces BLQ:blq1 sino BLQ:blq2{:
            Bloque b1 = (Bloque)blq1;
            Bloque b2 = (Bloque)blq2;
            RESULT = "if(" + (String)expc + "){\n\t" + b1.getAll() + "}else{\n\t" + b2.getAll() + "}\n";
        :}
        | mientras:whle EXPCOND:expcond hacer BLQ:blq {:
            Token token = (Token)whle;
            Bloque bl = (Bloque)blq;
            RESULT = token.getLex() + "(" + (String)expcond + ")" + "{\n\t" + bl.getAll() + "}\n";
        :}
        | repite BLQ:blq hasta:unt EXPCOND:expcond puntoComa {:
            Token token = (Token)unt;
            Bloque bl = (Bloque)blq;
            RESULT = "do" + "{\n\t" + bl.getAll() + "}" + token.getLex() + "(" + (String)expcond +")\n";
        :}
        | para identifier:id asignacion EXP:exp1 INC:incremento EXP:exp2 hacer BLQ:bloque {:
            Token token = (Token)id;
            Bloque b = (Bloque)bloque;
            if ((Boolean)incremento){
                RESULT = "for(" + token.getLex() + "=" + (String)exp1 + ";" + token.getLex() + "<" + (String)exp2 + "+1" + ";" + token.getLex()+ "=" + token.getLex() + "+1" + ")" + "{\n\t" + b.getAll() + "}\n";
            } else {
                RESULT = "for(" + token.getLex() + "=" + (String)exp1 + ";" + token.getLex() + ">" + (String)exp2 + "-1" + ";" + token.getLex()+ "=" + token.getLex() + "-1" + ")" + "{\n\t" + b.getAll() + "}\n";
            };:}
		| error puntoComa
		| error fin;

PROC_CALL ::= identifier:id SUBPARAMLIST:subplist {: Token token = (Token)id; RESULT = token.getLex() + "(" + (String)subplist + ")"; :};
SUBPARAMLIST ::= parentesisAbierto EXPLIST:expl parentesisCerrado {:RESULT = (String)expl;:}
        |{:RESULT = "";:};
EXPLIST ::= EXP:exp {:RESULT = exp;:}
        | EXP:exp coma EXPLIST:explist2 {:RESULT = (String)exp + "," + (String)explist2;:}
        | error parentesisCerrado;

ASIG ::= identifier:id asignacion EXP:exp {:Token token = (Token)id; RESULT = token.getLex() + " = " + exp; :};
EXP ::= EXP:exp1 OP:op EXP:exp2 {:RESULT = exp1 + " " + op + " " + exp2; :}
        | FACTOR:f {:RESULT = f; :};
OP ::= OPARIT:oparit {:RESULT = oparit; :};
OPARIT ::= suma {:RESULT = "+"; :}
        | resta {:RESULT = "-"; :}
        | producto {:RESULT = "*"; :}
        | division {:RESULT = "/"; :}
        | modulo{:RESULT = "%"; :};
FACTOR ::= SIMPVALUE:s {:RESULT = s; :}
        | parentesisAbierto EXP:e parentesisCerrado {: RESULT = "(" + e + ")"; :}
        | identifier:id SUBPARAMLIST:params {: Token token = (Token)id; RESULT = token.getLex() + params; :};

EXPCOND ::= EXPCOND:expcond OPLOG:oplog EXPCOND:expcond2  {:RESULT = (String)expcond + (String)oplog + (String)expcond2;:}
        | FACTORCOND:factorcond {:RESULT = factorcond; :};
OPLOG ::= condO {:RESULT = "||"; :}
        | condY {:RESULT = "&&"; :};
FACTORCOND ::= EXP:exp OPCOMP:opcomp EXP:exp2 {:RESULT = (String)exp + (String)opcomp + (String)exp2; :}
        | parentesisAbierto EXP:exp parentesisCerrado {:RESULT = "(" + (String)exp + ")"; :}
        | negacion FACTORCOND:factorcond {:RESULT = "!" + (String)factorcond; :}
        | error parentesisCerrado;
OPCOMP ::= condMenor {:RESULT = "<"; :}
        | condMayor {:RESULT = ">"; :}
        | condMayorIgual {:RESULT = ">="; :}
        | condMenorIgual {:RESULT = "<="; :}
        | igual {:RESULT = "=="; :};

