
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\005\003\000" +
    "\002\006\004\000\002\007\007\000\002\007\007\000\002" +
    "\010\005\000\002\011\006\000\002\011\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\004" +
    "\000\002\013\003\000\002\014\005\000\002\014\006\000" +
    "\002\014\007\000\002\014\006\000\002\014\005\000\002" +
    "\014\011\000\002\014\007\000\002\014\010\000\002\014" +
    "\017\000\002\015\003\000\002\015\005\000\002\016\003" +
    "\000\002\016\005\000\002\017\005\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\006\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\022\004\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\012\036\ufffe\037\ufffe\040\005\041\ufffe\001" +
    "\002\000\010\036\016\037\022\041\020\001\002\000\004" +
    "\043\010\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\010\044\013\045\014\046\012\001\002" +
    "\000\012\036\ufffe\037\ufffe\040\005\041\ufffe\001\002\000" +
    "\050\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\031" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\001\002\000\050\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\027\ufffd\031\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\001\002\000\050\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\027\ufffc\031\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\001\002\000\010\036\uffff\037" +
    "\uffff\041\uffff\001\002\000\004\043\ufff2\001\002\000\004" +
    "\002\000\001\002\000\004\043\ufff1\001\002\000\012\002" +
    "\ufff9\036\016\037\022\041\020\001\002\000\004\043\ufff0" +
    "\001\002\000\004\043\025\001\002\000\012\002\ufff8\036" +
    "\ufff8\037\ufff8\041\ufff8\001\002\000\004\030\026\001\002" +
    "\000\010\036\016\037\022\041\030\001\002\000\006\031" +
    "\170\034\167\001\002\000\006\031\033\043\ufff1\001\002" +
    "\000\004\043\032\001\002\000\006\031\ufff3\034\ufff3\001" +
    "\002\000\004\032\034\001\002\000\024\012\042\014\036" +
    "\015\046\017\040\036\016\037\022\041\020\042\037\043" +
    "\041\001\002\000\012\002\ufff6\036\ufff6\037\ufff6\041\ufff6" +
    "\001\002\000\004\030\163\001\002\000\014\030\052\043" +
    "\055\044\013\045\014\046\012\001\002\000\004\030\145" +
    "\001\002\000\006\020\134\030\135\001\002\000\004\030" +
    "\126\001\002\000\026\012\042\014\036\015\046\017\040" +
    "\033\125\036\016\037\022\041\020\042\037\043\041\001" +
    "\002\000\026\012\uffee\014\uffee\015\uffee\017\uffee\033\uffee" +
    "\036\uffee\037\uffee\041\uffee\042\uffee\043\uffee\001\002\000" +
    "\004\043\120\001\002\000\004\032\034\001\002\000\004" +
    "\016\050\001\002\000\004\030\051\001\002\000\016\026" +
    "\057\030\052\043\055\044\013\045\014\046\012\001\002" +
    "\000\014\030\052\043\055\044\013\045\014\046\012\001" +
    "\002\000\040\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\031\uffd5\034\uffd5\035\uffd5\001\002\000\040\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\031\uffdf\034\uffdf" +
    "\035\uffdf\001\002\000\042\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\027\uffd6\030\106\031\uffd6\034\uffd6\035\uffd6\001" +
    "\002\000\012\010\uffd3\011\uffd3\031\uffd3\035\uffd3\001\002" +
    "\000\014\030\052\043\055\044\013\045\014\046\012\001" +
    "\002\000\026\004\075\005\102\006\070\007\073\021\076" +
    "\022\074\023\100\024\077\025\071\027\072\001\002\000" +
    "\010\010\062\011\065\031\063\001\002\000\016\026\uffd1" +
    "\030\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\001\002\000" +
    "\026\012\uffe6\014\uffe6\015\uffe6\017\uffe6\033\uffe6\036\uffe6" +
    "\037\uffe6\041\uffe6\042\uffe6\043\uffe6\001\002\000\016\026" +
    "\057\030\052\043\055\044\013\045\014\046\012\001\002" +
    "\000\016\026\uffd0\030\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\001\002\000\012\010\062\011\065\031\uffd4\035\uffd4" +
    "\001\002\000\014\030\052\043\055\044\013\045\014\046" +
    "\012\001\002\000\014\030\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\001\002\000\014\030\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\001\002\000\014\030\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\001\002\000\014\030\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\001\002\000\014\030\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\001\002\000\014\030\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000\014\030\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\001\002\000\014\030" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\014" +
    "\030\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\001\002\000" +
    "\014\030\052\043\055\044\013\045\014\046\012\001\002" +
    "\000\014\030\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\001" +
    "\002\000\024\010\uffcf\011\uffcf\021\076\022\074\023\100" +
    "\024\077\025\071\031\uffcf\035\uffcf\001\002\000\040\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\021\076" +
    "\022\074\023\100\024\077\025\071\027\uffe0\031\uffe0\034" +
    "\uffe0\035\uffe0\001\002\000\012\010\uffd2\011\uffd2\031\uffd2" +
    "\035\uffd2\001\002\000\016\030\052\031\110\043\055\044" +
    "\013\045\014\046\012\001\002\000\006\031\113\034\112" +
    "\001\002\000\040\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\027\uffd8\031\uffd8\034\uffd8\035\uffd8\001\002\000\020\021" +
    "\076\022\074\023\100\024\077\025\071\031\uffe2\034\uffe2" +
    "\001\002\000\014\030\052\043\055\044\013\045\014\046" +
    "\012\001\002\000\040\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\027\uffd9\031\uffd9\034\uffd9\035\uffd9\001\002\000\020" +
    "\021\076\022\074\023\100\024\077\025\071\031\uffe1\034" +
    "\uffe1\001\002\000\016\021\076\022\074\023\100\024\077" +
    "\025\071\031\116\001\002\000\040\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\027\uffd7\031\uffd7\034\uffd7\035\uffd7\001" +
    "\002\000\006\034\121\035\122\001\002\000\006\034\uffe4" +
    "\035\uffe4\001\002\000\004\043\123\001\002\000\026\012" +
    "\uffed\014\uffed\015\uffed\017\uffed\033\uffed\036\uffed\037\uffed" +
    "\041\uffed\042\uffed\043\uffed\001\002\000\006\034\uffe3\035" +
    "\uffe3\001\002\000\026\012\uffef\014\uffef\015\uffef\017\uffef" +
    "\033\uffef\036\uffef\037\uffef\041\uffef\042\uffef\043\uffef\001" +
    "\002\000\034\002\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\033\ufff5\036\ufff5\037\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\001\002\000\016\026\057\030\052\043\055" +
    "\044\013\045\014\046\012\001\002\000\010\010\062\011" +
    "\065\031\130\001\002\000\004\032\034\001\002\000\004" +
    "\013\132\001\002\000\004\032\034\001\002\000\026\012" +
    "\uffe8\014\uffe8\015\uffe8\017\uffe8\033\uffe8\036\uffe8\037\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\001\002\000\014\030\052\043" +
    "\055\044\013\045\014\046\012\001\002\000\016\030\052" +
    "\031\137\043\055\044\013\045\014\046\012\001\002\000" +
    "\006\031\141\034\112\001\002\000\004\035\140\001\002" +
    "\000\026\012\uffea\014\uffea\015\uffea\017\uffea\033\uffea\036" +
    "\uffea\037\uffea\041\uffea\042\uffea\043\uffea\001\002\000\004" +
    "\035\142\001\002\000\026\012\uffeb\014\uffeb\015\uffeb\017" +
    "\uffeb\033\uffeb\036\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\001\002\000\016\021\076\022\074\023\100\024\077\025" +
    "\071\035\144\001\002\000\026\012\uffec\014\uffec\015\uffec" +
    "\017\uffec\033\uffec\036\uffec\037\uffec\041\uffec\042\uffec\043" +
    "\uffec\001\002\000\004\043\146\001\002\000\004\020\147" +
    "\001\002\000\014\030\052\043\055\044\013\045\014\046" +
    "\012\001\002\000\016\021\076\022\074\023\100\024\077" +
    "\025\071\035\151\001\002\000\016\026\057\030\052\043" +
    "\055\044\013\045\014\046\012\001\002\000\010\010\062" +
    "\011\065\035\153\001\002\000\004\043\154\001\002\000" +
    "\004\020\155\001\002\000\014\030\052\043\055\044\013" +
    "\045\014\046\012\001\002\000\016\021\076\022\074\023" +
    "\100\024\077\025\071\031\157\001\002\000\004\032\034" +
    "\001\002\000\026\012\uffe5\014\uffe5\015\uffe5\017\uffe5\033" +
    "\uffe5\036\uffe5\037\uffe5\041\uffe5\042\uffe5\043\uffe5\001\002" +
    "\000\016\021\076\022\074\023\100\024\077\025\071\035" +
    "\162\001\002\000\026\012\uffe9\014\uffe9\015\uffe9\017\uffe9" +
    "\033\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9\043\uffe9\001" +
    "\002\000\016\026\057\030\052\043\055\044\013\045\014" +
    "\046\012\001\002\000\010\010\062\011\065\031\165\001" +
    "\002\000\004\032\034\001\002\000\026\012\uffe7\014\uffe7" +
    "\015\uffe7\017\uffe7\033\uffe7\036\uffe7\037\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\001\002\000\010\036\016\037\022\041\020" +
    "\001\002\000\004\032\034\001\002\000\012\002\ufff7\036" +
    "\ufff7\037\ufff7\041\ufff7\001\002\000\004\043\173\001\002" +
    "\000\006\031\ufff4\034\ufff4\001\002\000\004\002\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\002\005\003\003\001\001\000\010\005" +
    "\016\006\020\012\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\010\001\001\000" +
    "\004\003\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\173\006\020" +
    "\012\022\001\001\000\002\001\001\000\004\007\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\026" +
    "\012\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\034\001\001" +
    "\000\010\012\044\013\042\014\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\052\017\160\021\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\044\014\123\001\001\000\002\001\001" +
    "\000\004\015\116\001\001\000\004\010\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\052\017\057" +
    "\021\053\022\060\024\055\001\001\000\010\004\052\017" +
    "\114\021\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\052\017" +
    "\057\021\053\024\104\001\001\000\006\020\066\025\100" +
    "\001\001\000\004\023\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\052\017\057\021\053\022\065" +
    "\024\055\001\001\000\002\001\001\000\004\023\063\001" +
    "\001\000\010\004\052\017\103\021\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\052\017" +
    "\102\021\053\001\001\000\002\001\001\000\004\020\066" +
    "\001\001\000\004\020\066\001\001\000\002\001\001\000" +
    "\012\004\052\016\106\017\110\021\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\066\001\001\000" +
    "\010\004\052\017\113\021\053\001\001\000\002\001\001" +
    "\000\004\020\066\001\001\000\004\020\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\052\017\057\021\053" +
    "\022\126\024\055\001\001\000\004\023\063\001\001\000" +
    "\004\010\130\001\001\000\002\001\001\000\004\010\132" +
    "\001\001\000\002\001\001\000\010\004\052\017\142\021" +
    "\053\001\001\000\012\004\052\016\135\017\110\021\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\052\017\147\021\053\001\001\000\004" +
    "\020\066\001\001\000\014\004\052\017\057\021\053\022" +
    "\151\024\055\001\001\000\004\023\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\052\017\155\021" +
    "\053\001\001\000\004\020\066\001\001\000\004\010\157" +
    "\001\001\000\002\001\001\000\004\020\066\001\001\000" +
    "\002\001\001\000\014\004\052\017\057\021\053\022\163" +
    "\024\055\001\001\000\004\023\063\001\001\000\004\010" +
    "\165\001\001\000\002\001\001\000\004\012\171\001\001" +
    "\000\004\010\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s) {
		Token t=(Token)s.value;
        System.out.print("Error sintactico en la entrada, delante del token: "+ t.getValor()+" Linea:"+t.getRow()+" Caracter:"+t.getColumn()+"\n");
    	report_error("Error sintactico en la entrada, delante del token: "+ t.getValor()+" Linea:"+t.getRow()+" Caracter:"+t.getColumn()+"\n",null);
	}
	
	public void report_error(String message, Object info){
		System.err.println(message);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= DEFINES PARTES 
            {
              Object RESULT =null;
		int defvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int partvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int partvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object partval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Funcion> listfun = (ArrayList<Funcion>) partval;
    int i=0;
    int numMain = 0;
    Funcion pr=null;
    Funcion auxfun=null;
    boolean tiene_main = false;
    boolean mas_de_un_main = false;
    for(Funcion f:listfun){
        if(f.getNombre().equalsIgnoreCase("main")){
            auxfun = f;
            numMain++;
        }
    }
    if(numMain==1){
        pr = auxfun;
        listfun.remove(auxfun);
        tiene_main = true;
    }else if (numMain==0){
        pr = null;
    }else{
        mas_de_un_main = true;
    }
    ArrayList<Linea> aux = (ArrayList<Linea>) defval;
    Constantes constantes = new Constantes(aux);
    Programa p = new Programa(listfun,pr);
    p.setConstantes(constantes);
    if(tiene_main){
        p.setTiene_main(true);
    }
    if(mas_de_un_main){
        p.setError(true);
    }
    p.imprime();
    RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEFINES ::= p_define ident CTES DEFINES 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ctevalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ctevalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cteval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int defvalorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvalorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defvalor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Linea> lineas = new ArrayList();
        Elemento igual = new Elemento("= ","sin_tipo");
        Elemento n = new Elemento(";","sin_tipo");
        Token t = (Token) idval;
        Elemento id = new Elemento(t.getValor(),"id");
        Elemento valor_cte = (Elemento)cteval;
        ArrayList<Linea> laux = (ArrayList<Linea>) defvalor;
        ArrayList<Elemento> elem = new ArrayList();
        elem.add(id);
        elem.add(igual);
        elem.add(valor_cte);
        elem.add(n);
        Linea l = new Linea(elem,"constante");
        lineas.add(l);
        lineas.addAll(laux);
        RESULT = lineas;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINES ::= 
            {
              Object RESULT =null;
		
            ArrayList<Linea> l = new ArrayList();
            RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CTES ::= constint 
            {
              Object RESULT =null;
		int cteintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cteintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cteint = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Token t = (Token) cteint;
            Elemento e = new Elemento(t.getValor(),"valor_int");
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CTES ::= constfloat 
            {
              Object RESULT =null;
		int ctefloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctefloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctefloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Token t = (Token) ctefloat;
                Elemento e = new Elemento(t.getValor(),"valor_float");
                RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CTES ::= constlit 
            {
              Object RESULT =null;
		int ctelitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctelitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctelit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Token t = (Token) ctelit;
                    Elemento e = new Elemento(t.getValor(),"valor_lit");
                    RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARTES ::= PART PARTES 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int list_fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int list_fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list_f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Funcion fun = (Funcion) f;
    ArrayList<Funcion> lista_funciones = new ArrayList();
    ArrayList<Funcion> aux = (ArrayList<Funcion>) list_f;
    lista_funciones.add(fun);
    lista_funciones.addAll(aux);
    RESULT = lista_funciones;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARTES ::= PART 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Funcion fun = (Funcion) f;
        ArrayList<Funcion> lista_funciones = new ArrayList();
        lista_funciones.add(fun);
        RESULT = lista_funciones;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARTES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PART ::= TYPE RESTPART 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restpartvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restpartvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object restpartval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Funcion f = (Funcion) restpartval;
    Cabecera cab = f.getCabecera();
    Elemento tip = (Elemento) tipo;
    cab.setTipo(tip);
    if(!tip.getValor().equals("void")){
        cab.setTieneReturn(true);
    }
    f.setCabecera(cab);
    RESULT = f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RESTPART ::= ident parentesis_abierto LISTPARAM parentesis_cerrado BLQ 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listparamavalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listparamavalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object listparamaval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blqval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Elemento> elem = new ArrayList();
        ArrayList<Elemento> paramInt = new ArrayList();
        ArrayList<Elemento> paramReal = new ArrayList();
        ArrayList<Elemento> parametros = new ArrayList();
        Elemento coma = new Elemento(",","sin_tipo");
        ArrayList<Elemento> aux = (ArrayList<Elemento>) listparamaval;
        String actual="";
        String anterior="";
        String integers="";
        String reales="";
        Elemento i = new Elemento("INTEGER","sin_tipo");
        Elemento r = new Elemento("REAL","sin_tipo");
        Elemento dos_puntos = new Elemento(":","sin_tipo");
        Elemento pyc = new Elemento(";","sin_tipo");

        // id (    ************************

        Token t = (Token) idval;
        Elemento e = new Elemento(t.getValor(),"id");
        elem.add(e);
        Elemento paux = new Elemento("(","sin_tipo");
        elem.add(paux);

        //Tratamiento de los parametros
        for(Elemento a:aux){
            actual = a.getTipo();
			if(actual == anterior){
				if(a.getTipo()=="INTEGER"){
                    paramInt.add(a);
                    paramInt.add(coma);
                }else if(a.getTipo()=="REAL"){
                    paramReal.add(a);
                    paramReal.add(coma);
                }
				
				anterior = actual;
			}else{
                if(paramInt.size()!=0){
                    paramInt.remove(paramInt.size()-1);
                    paramInt.add(dos_puntos);
                    paramInt.add(i);
                    paramInt.add(pyc);
                    elem.addAll(paramInt);
                    paramInt = new ArrayList();
                }
                if(paramReal.size()!=0){
                    paramReal.remove(paramReal.size()-1);
                    paramReal.add(dos_puntos);
                    paramReal.add(r);
                    paramReal.add(pyc);
                    elem.addAll(paramReal);
                    paramReal = new ArrayList();
                }

				if(a.getTipo()=="INTEGER"){
                    paramInt.add(a);
                    paramInt.add(coma);
                }else if(a.getTipo()=="REAL"){
                    paramReal.add(a);
                    paramReal.add(coma);
                }
				anterior = actual;
			}
		}
		if(paramInt.size()!=0){
            paramInt.remove(paramInt.size()-1);
            paramInt.add(dos_puntos);
            paramInt.add(i);
            paramInt.add(pyc);
            elem.addAll(paramInt);
        }
        if(paramReal.size()!=0){
            paramReal.remove(paramReal.size()-1);
            paramReal.add(dos_puntos);
            paramReal.add(r);
            paramReal.add(pyc);
            elem.addAll(paramReal);
        }

        // )   **********************

        paux = new Elemento(")","sin_tipo");
        elem.add(paux);
        Cabecera cab = new Cabecera(elem);
        ArrayList<Linea> auxblq= (ArrayList<Linea>) blqval;
        ArrayList<Linea> lcuerpo = new ArrayList();
        ArrayList<Linea> lvariables = new ArrayList();
        boolean tieneReturn = false;
        for(Linea l:auxblq){
            if(l.getTipo()=="declaracion_variable"){
                lvariables.add(l);
            }else{
                if(l.isTieneReturn()){
                        tieneReturn = true;
                    }
                lcuerpo.add(l);
            }
        }
        Cuerpo cuerpo = new Cuerpo(lcuerpo);
        cuerpo.setNombre(e);
        cuerpo.setTieneReturn(tieneReturn);
        Variables variables = new Variables(lvariables);
        Funcion f = new Funcion(cab,cuerpo,variables);
        f.setNombre(t.getValor());
        RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RESTPART ::= ident parentesis_abierto p_v parentesis_cerrado BLQ 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blqvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blqval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Elemento> elem = new ArrayList();
            Token t = (Token) idval;
            Elemento e = new Elemento(t.getValor(),"id");
            elem.add(e);
            Cabecera cab = new Cabecera(elem);
            ArrayList<Linea> aux= (ArrayList<Linea>) blqval;
            ArrayList<Linea> lcuerpo = new ArrayList();
            ArrayList<Linea> lvariables = new ArrayList();
            boolean tieneReturn = false;
            for(Linea l:aux){
                if(l.getTipo()=="declaracion_variable"){
                    lvariables.add(l);
                }else{
                    if(l.isTieneReturn()){
                        tieneReturn = true;
                    }
                    lcuerpo.add(l);
                }
            }
            Cuerpo cuerpo = new Cuerpo(lcuerpo);
            cuerpo.setNombre(e);
            cuerpo.setTieneReturn(tieneReturn);
            Variables variables = new Variables(lvariables);
            cab.setSinArgumentos(true);
            Funcion f = new Funcion(cab,cuerpo,variables);
            f.setNombre(t.getValor());
            RESULT = f;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLQ ::= corchete_abierto SENTLIST corchete_cerrado 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Linea> l = (ArrayList<Linea>) lista;
    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTPARAM ::= LISTPARAM coma TYPE ident 
            {
              Object RESULT =null;
		int listparamavalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listparamavalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object listparamaval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Elemento> l = new ArrayList();
        ArrayList<Elemento> aux = (ArrayList<Elemento>) listparamaval;
        Token t = (Token) idval;
        Elemento tip = (Elemento) tipo;
        Elemento e = new Elemento(t.getValor(),tip.getValor());
        l.addAll(aux);
        l.add(e);
        RESULT = l;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTPARAM ::= TYPE ident 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Elemento> l = new ArrayList();
            Token t = (Token) idval;
            Elemento tip = (Elemento) tipo;
            Elemento e = new Elemento(t.getValor(),tip.getValor());
            l.add(e);
            RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= entero 
            {
              Object RESULT =null;
		
            Elemento e = new Elemento("INTEGER","sin_tipo");
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= p_v 
            {
              Object RESULT =null;
		
                    Elemento e = new Elemento("void","sin_tipo");
                    RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= real 
            {
              Object RESULT =null;
		
                        Elemento e = new Elemento("REAL","sin_tipo");
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;
		int lineas1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lineas1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lineas1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Linea> lineas = new ArrayList();
        ArrayList<Linea> aux = (ArrayList<Linea>) lineas1;
        ArrayList<Linea> aux2 = (ArrayList<Linea>) l;
        lineas.addAll(aux);
        lineas.addAll(aux2); 
        RESULT = lineas;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTLIST ::= SENT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Linea> lineas = (ArrayList<Linea>) l;
            RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= TYPE LID punto_y_coma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lidval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<Elemento> elem = new ArrayList();
        ArrayList<Elemento> aux = (ArrayList<Elemento>) lidval;
        Elemento t = (Elemento) tipo;
        Elemento d = new Elemento(":","sin_tipo");
        Elemento c = new Elemento(";","sin_tipo");
        elem.addAll(aux);
        elem.add(d);
        elem.add(t);
        elem.add(c);
        Linea l = new Linea(elem,"declaracion_variable");
        l.setTipo_variable(t.getValor());
        ArrayList<Linea> ll = new ArrayList();
        ll.add(l);
        RESULT = ll;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= ident op_igual EXP punto_y_coma 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Token t = (Token) idval;
                Elemento asig = new Elemento(":=","sin_tipo");
                Elemento e = new Elemento(t.getValor(),"id");
                Elemento c = new Elemento(";","sin_tipo");
                ArrayList<Elemento> elem = new ArrayList();
                ArrayList<Elemento> aux = (ArrayList<Elemento>) expval;
                elem.add(e);
                elem.add(asig);
                elem.addAll(aux);
                elem.add(c);
                Linea l = new Linea(elem,"cuerpo");
                ArrayList<Linea> ll = new ArrayList();
                ll.add(l);
                RESULT = ll;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= ident parentesis_abierto LEXP parentesis_cerrado punto_y_coma 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lexpvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lexpval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Token t = (Token) idval;
                    Elemento e = new Elemento(t.getValor(),"id");
                    ArrayList<Elemento> aux = (ArrayList<Elemento>) lexpval;
                    Elemento p1 = new Elemento("(","sin_tipo");
                    Elemento p2 = new Elemento(")","sin_tipo");
                    Elemento c = new Elemento(";","sin_tipo");
                    ArrayList<Elemento> elem = new ArrayList();
                    elem.add(e);
                    elem.add(p1);
                    elem.addAll(aux);
                    elem.add(p2);
                    elem.add(c);
                    Linea l = new Linea(elem,"cuerpo");
                    ArrayList<Linea> ll = new ArrayList();
                    ll.add(l);
                    RESULT = ll;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= ident parentesis_abierto parentesis_cerrado punto_y_coma 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        Token t = (Token) idval;
                        Elemento e = new Elemento(t.getValor(),"id");
                        Elemento c = new Elemento(";","sin_tipo");
                        ArrayList<Elemento> elem = new ArrayList();
                        elem.add(e);
                        elem.add(c);
                        Linea l = new Linea(elem,"cuerpo");
                        ArrayList<Linea> ll = new ArrayList();
                        ll.add(l);
                        RESULT = ll;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= p_return EXP punto_y_coma 
            {
              Object RESULT =null;
		int expvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            ArrayList<Elemento> elem = new ArrayList();
                            ArrayList<Elemento> aux = (ArrayList<Elemento>) expval;
                            Elemento e = new Elemento (":=","sin_tipo");
                            elem.add(e);
                            elem.addAll(aux);
                            e = new Elemento(";","puntoycoma");
                            elem.add(e);
                            Linea l = new Linea(elem,"cuerpo");
                            l.setTieneReturn(true);
                            ArrayList<Linea> ll = new ArrayList();
                            ll.add(l);
                            RESULT = ll;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= p_if parentesis_abierto LCOND parentesis_cerrado BLQ p_else BLQ 
            {
              Object RESULT =null;
		int lcondvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lcondvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lcondval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blqval1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blqval1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object blqval1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqval2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqval2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blqval2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                ArrayList<Linea> ll = new ArrayList();
                                ArrayList<Elemento> linea = new ArrayList();
                                ArrayList<Elemento> l1 = (ArrayList<Elemento>) lcondval;
                                ArrayList<Linea> l2 = (ArrayList<Linea>) blqval1;
                                ArrayList<Linea> l3 = (ArrayList<Linea>) blqval2;
                                Elemento elemento1 = new Elemento("if","sin_tipo");
                                Elemento elemento2 = new Elemento("then","sin_tipo");
                                Elemento elemento3 = new Elemento("else","sin_tipo");

                                //IF LCOND THEN
                                linea.add(elemento1);
                                linea.addAll(l1);
                                linea.add(elemento2);
                                Linea linea1 = new Linea(linea);
                                linea1.setTipo("condicion");
                                ll.add(linea1);

                                //BEGIN
                                Elemento beg = new Elemento("begin","sin_tipo");
                                ArrayList<Elemento> linbeg = new ArrayList();
                                linbeg.add(beg);
                                Linea lbeg = new Linea(linbeg);
                                ll.add(lbeg);

                                //BLQ1
                                for(Linea l:l2){
                                    l.setTipo("condicion_cuerpo");
                                    l.setTabulacion(l.getTabulacion()+"\t");
                                    ll.add(l);
                                }
                                //END
                                Elemento en = new Elemento("end","sin_tipo");
                                Elemento pyc = new Elemento(";","sin_tipo");
                                ArrayList<Elemento> linen = new ArrayList();
                                linen.add(en);
                                linen.add(pyc);
                                Linea len = new Linea(linen);
                                ll.add(len);

                                //ELSE
                                linea = new ArrayList();
                                linea.add(elemento3);
                                linea1 = new Linea(linea);
                                linea1.setTipo("condicion");
                                ll.add(linea1);

                                //BEGIN
                                beg = new Elemento("begin","sin_tipo");
                                linbeg = new ArrayList();
                                linbeg.add(beg);
                                lbeg = new Linea(linbeg);
                                ll.add(lbeg);

                                //BLQ2
                                for(Linea l:l3){
                                    l.setTipo("condicion_cuerpo");
                                    l.setTabulacion(l.getTabulacion()+"\t");
                                    ll.add(l);
                                }

                                //END
                                en = new Elemento("end","sin_tipo");
                                pyc = new Elemento(";","sin_tipo");
                                linen = new ArrayList();
                                linen.add(en);
                                linen.add(pyc);
                                len = new Linea(linen);
                                ll.add(len);

                                RESULT = ll;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT ::= p_while parentesis_abierto LCOND parentesis_cerrado BLQ 
            {
              Object RESULT =null;
		int lcondvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcondvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lcondval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blqval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    ArrayList<Linea> ll = new ArrayList();
                                    ArrayList<Elemento> linea = new ArrayList();
                                    ArrayList<Elemento> l1 = (ArrayList<Elemento>) lcondval;
                                    ArrayList<Linea> l2 = (ArrayList<Linea>) blqval;
                                    Elemento elemento1 = new Elemento("while","sin_tipo");
                                    Elemento elemento2 = new Elemento("do","sin_tipo");
                                    //WHILE LCOND
                                    linea.add(elemento1);
                                    linea.addAll(l1);
                                    linea.add(elemento2);
                                    Linea linea1 = new Linea(linea);
                                    linea1.setTipo("condicion");
                                    ll.add(linea1);

                                    //BEGIN
                                    Elemento beg = new Elemento("begin","sin_tipo");
                                    ArrayList<Elemento> linbeg = new ArrayList();
                                    linbeg.add(beg);
                                    Linea lbeg = new Linea(linbeg);
                                    ll.add(lbeg);

                                    //BLQ
                                    for(Linea l:l2){
                                        l.setTipo("condicion_cuerpo");
                                        l.setTabulacion(l.getTabulacion()+"\t");
                                        ll.add(l);
                                    }

                                    //END
                                    Elemento en = new Elemento("end","sin_tipo");
                                    Elemento pyc = new Elemento(";","sin_tipo");
                                    ArrayList<Elemento> linen = new ArrayList();
                                    linen.add(en);
                                    linen.add(pyc);
                                    Linea len = new Linea(linen);
                                    ll.add(len);

                                    RESULT = ll;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= p_do BLQ p_until parentesis_abierto LCOND parentesis_cerrado 
            {
              Object RESULT =null;
		int blqvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int blqvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object blqval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lcondvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcondvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lcondval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        ArrayList<Linea> ll = new ArrayList();
                                        ArrayList<Elemento> linea = new ArrayList();
                                        ArrayList<Elemento> l1 = (ArrayList<Elemento>) lcondval;
                                        ArrayList<Linea> l2 = (ArrayList<Linea>) blqval;
                                        Elemento elemento1 = new Elemento("repeat","sin_tipo");
                                        Elemento elemento2 = new Elemento("until","sin_tipo");
                                        Elemento elemento3 = new Elemento(";","sin_tipo");
                                        //REPEAT
                                        linea.add(elemento1);
                                        Linea linea1 = new Linea(linea);
                                        linea1.setTipo("condicion");
                                        ll.add(linea1);

                                        //BEGIN
                                        Elemento beg = new Elemento("begin","sin_tipo");
                                        ArrayList<Elemento> linbeg = new ArrayList();
                                        linbeg.add(beg);
                                        Linea lbeg = new Linea(linbeg);
                                        ll.add(lbeg);

                                        String tab;
                                        //BLQ
                                        for(Linea l:l2){
                                            l.setTipo("condicion_cuerpo");
                                            tab = l.getTabulacion();
                                            if(tab!=null){
                                                l.setTabulacion(tab+"\t");
                                            }else{
                                                l.setTabulacion("\t");
                                            }
                                            //l.setTabulacion(l.getTabulacion()+"\t");
                                            ll.add(l);
                                        }

                                        //END
                                        Elemento en = new Elemento("end","sin_tipo");
                                        Elemento pyc = new Elemento(";","sin_tipo");
                                        ArrayList<Elemento> linen = new ArrayList();
                                        linen.add(en);
                                        linen.add(pyc);
                                        Linea len = new Linea(linen);
                                        ll.add(len);

                                        //UNTIL LCOND
                                        linea = new ArrayList();
                                        linea.add(elemento2);
                                        linea.addAll(l1);
                                        linea.add(elemento3);
                                        Linea linea2 = new Linea(linea);
                                        linea2.setTipo("condicion");
                                        ll.add(linea2);
                                        RESULT = ll;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= p_buclefor parentesis_abierto ident op_igual EXP punto_y_coma LCOND punto_y_coma ident op_igual EXP parentesis_cerrado BLQ 
            {
              Object RESULT =null;
		int idval1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idval1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object idval1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int expval1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int expval1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object expval1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lcondvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lcondvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lcondval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idval2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idval2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idval2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expval2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expval2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expval2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blqval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            ArrayList<Linea> ll = new ArrayList();
                                            ArrayList<Elemento> exp2 = (ArrayList<Elemento>) expval2;
                                            ArrayList<Elemento> exp1 = (ArrayList<Elemento>) expval1;
                                            ArrayList<Elemento> lcond = (ArrayList<Elemento>) lcondval;
                                            ArrayList<Linea> blq = (ArrayList<Linea>) blqval;
                                            Token t = (Token) idval1;
                                            Elemento id1 = new Elemento(t.getValor(),"id");
                                            Token t2 = (Token) idval2;
                                            Elemento id2 = new Elemento(t2.getValor(),"id");
                                            Elemento pyc = new Elemento(";","sin_tipo");
                                            Elemento asig = new Elemento(":=","sin_tipo");
                                            Elemento inc;
                                            Elemento mas = new Elemento("+","sin_tipo");
                                            Elemento menos = new Elemento("-","sin_tipo");
                                            if(exp2.get(0).getValor().equals(id2.getValor())){
                                                if(exp2.get(1).getValor().equals(mas.getValor()) && exp2.get(2).getValor().equals("1")){
                                                    inc = new Elemento("to","sin_tipo");
                                                }else if(exp2.get(1).getValor().equals(menos.getValor()) && exp2.get(2).getValor().equals("1")){
                                                    inc = new Elemento("downto","sin_tipo");
                                                }else{//No es unitario 
                                                    inc = new Elemento("no_es_for","sin_tipo");
                                                }
                                            }else{//No es unitario
                                                inc = new Elemento("no_es_for","sin_tipo");
                                            }
                                            if(inc.getValor()!="no_es_for"){
                                                Elemento pfor = new Elemento("for","sin_tipo");
                                                Elemento pd = new Elemento("do","sin_tipo");
                                                Elemento lcondlast = lcond.get(lcond.size()-1);
                                                ArrayList<Elemento> aux = new ArrayList();
                                                aux.add(pfor);
                                                aux.add(id1);
                                                aux.add(asig);
                                                aux.addAll(exp1);
                                                aux.add(inc);
                                                aux.add(lcondlast);
                                                aux.add(pd);
                                                Linea line = new Linea(aux);
                                                line.setTipo("condicion");
                                                ll.add(line);

                                                //BEGIN
                                                Elemento beg = new Elemento("begin","sin_tipo");
                                                ArrayList<Elemento> linbeg = new ArrayList();
                                                linbeg.add(beg);
                                                Linea lbeg = new Linea(linbeg);
                                                ll.add(lbeg);

                                                //BLQ
                                                for(Linea l:blq){
                                                    l.setTipo("condicion_cuerpo");
                                                    l.setTabulacion(l.getTabulacion()+"\t");
                                                    ll.add(l);
                                                }

                                                //END
                                                Elemento en = new Elemento("end","sin_tipo");
                                                ArrayList<Elemento> linen = new ArrayList();
                                                linen.add(en);
                                                linen.add(pyc);
                                                Linea len = new Linea(linen);
                                                ll.add(len);

                                            }else{
                                                //Inicializacion de la variable contador
                                                ArrayList<Elemento> aux = new ArrayList();
                                                aux.add(id1);
                                                aux.add(asig);
                                                aux.addAll(exp1);
                                                aux.add(pyc);
                                                Linea linea1 = new Linea(aux);
                                                linea1.setTipo("condicion");
                                                ll.add(linea1);
                                                //WHILE LCOND DO
                                                Elemento elemento1 = new Elemento("while","sin_tipo");
                                                Elemento elemento2 = new Elemento("do","sin_tipo");
                                                ArrayList<Elemento> aux2 = new ArrayList();
                                                aux2.add(elemento1);
                                                aux2.addAll(lcond);
                                                aux2.add(elemento2);
                                                Linea linea2 = new Linea(aux2);
                                                linea2.setTipo("condicion");
                                                ll.add(linea2);

                                                //BEGIN
                                                Elemento beg = new Elemento("begin","sin_tipo");
                                                ArrayList<Elemento> linbeg = new ArrayList();
                                                linbeg.add(beg);
                                                Linea lbeg = new Linea(linbeg);
                                                ll.add(lbeg);

                                                //BLQ
                                                for(Linea l:blq){
                                                    l.setTipo("condicion_cuerpo");
                                                    l.setTabulacion(l.getTabulacion()+"\t");
                                                    ll.add(l);
                                                }

                                                //Incremento
                                                ArrayList<Elemento> aux3 = new ArrayList();
                                                aux3.add(id2);
                                                aux3.add(asig);
                                                aux3.addAll(exp2);
                                                aux3.add(pyc);
                                                Linea linea3 = new Linea(aux3);
                                                linea3.setTipo("condicion_cuerpo");
                                                String tab = linea3.getTabulacion();
                                                if(tab!=null){
                                                    linea3.setTabulacion(tab+"\t");
                                                }else{
                                                    linea3.setTabulacion("\t");
                                                }
                                                
                                                ll.add(linea3);

                                                //END
                                                Elemento en = new Elemento("end","sin_tipo");
                                                ArrayList<Elemento> linen = new ArrayList();
                                                linen.add(en);
                                                linen.add(pyc);
                                                Linea len = new Linea(linen);
                                                ll.add(len);

                                            }
                                            
                                            RESULT = ll;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LID ::= ident 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Token t = (Token) idval;
        Elemento e = new Elemento(t.getValor(),"id");
        ArrayList<Elemento> l = new ArrayList();
        l.add(e);
        RESULT = l;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LID ::= LID coma ident 
            {
              Object RESULT =null;
		int lidvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lidvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lidval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Token t = (Token) idval;
            Elemento e = new Elemento(t.getValor(),"id");
            Elemento c = new Elemento(",","sin_tipo");
            ArrayList<Elemento> aux = (ArrayList<Elemento>)lidval;
            ArrayList<Elemento> elem = new ArrayList();
            elem.addAll(aux);
            elem.add(c);
            elem.add(e);
            RESULT = elem;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LEXP ::= EXP 
            {
              Object RESULT =null;
		int expvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Elemento> elem =(ArrayList<Elemento>) expval;
        RESULT = elem;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LEXP ::= LEXP coma EXP 
            {
              Object RESULT =null;
		int lexpvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lexpval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Elemento> aux = (ArrayList<Elemento>) lexpval;
            ArrayList<Elemento> aux2 = (ArrayList<Elemento>) expval;
            Elemento c = new Elemento(",","sin_tipo");
            aux.add(c);
            aux.addAll(aux2);
            RESULT = aux;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Elemento> lista = new ArrayList();
        ArrayList<Elemento> exp = (ArrayList<Elemento>) exp1;
        lista.addAll(exp);
        Elemento op = (Elemento) opval;
        lista.add(op);
        exp = (ArrayList<Elemento>) exp2;
        lista.addAll(exp);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= FACTOR 
            {
              Object RESULT =null;
		int facvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object facval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Elemento> l = (ArrayList<Elemento>) facval;
            RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP ::= op_mas 
            {
              Object RESULT =null;
		
            Elemento e = new Elemento("+","sin_tipo");
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP ::= op_menos 
            {
              Object RESULT =null;
		
                    Elemento e = new Elemento("-","sin_tipo");
                    RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= op_mult 
            {
              Object RESULT =null;
		
                        Elemento e = new Elemento("*","sin_tipo");
                        RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= op_div 
            {
              Object RESULT =null;
		
                            Elemento e = new Elemento("div","sin_tipo");
                            RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= op_mod 
            {
              Object RESULT =null;
		
                                Elemento e = new Elemento("mod","sin_tipo");
                                RESULT = e;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= ident parentesis_abierto LEXP parentesis_cerrado 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lexpvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lexpvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lexpval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Token t = (Token) idval;
        Elemento e = new Elemento(t.getValor(),"id");
        ArrayList<Elemento> aux = (ArrayList<Elemento>) lexpval;
        Elemento p1 = new Elemento("(","sin_tipo");
        Elemento p2 = new Elemento(")","sin_tipo");
        ArrayList<Elemento> elem = new ArrayList();
        elem.add(e);
        elem.add(p1);
        elem.addAll(aux);
        elem.add(p2);
        RESULT = elem;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= ident parentesis_abierto parentesis_cerrado 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Token t = (Token) idval;
            Elemento e = new Elemento(t.getValor(),"id");
            ArrayList<Elemento> elem = new ArrayList();
            elem.add(e);
            RESULT = elem;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTOR ::= parentesis_abierto EXP parentesis_cerrado 
            {
              Object RESULT =null;
		int expvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                ArrayList<Elemento> aux = (ArrayList<Elemento>) expval;
                ArrayList<Elemento> elem = new ArrayList();
                Elemento a = new Elemento("(","sin_tipo");
                Elemento b = new Elemento(")","sin_tipo");
                elem.add(a);
                elem.addAll(aux);
                elem.add(b);
                RESULT = elem;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= ident 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Token t = (Token) idval;
                    Elemento e = new Elemento(t.getValor(),"id");
                    ArrayList<Elemento> l = new ArrayList();
                    l.add(e);
                    RESULT = l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= CTES 
            {
              Object RESULT =null;
		int ctevalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctevalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cteval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Elemento e = (Elemento)cteval;
                        ArrayList<Elemento> l = new ArrayList();
                        l.add(e);
                        RESULT = l;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LCOND ::= LCOND OPL LCOND 
            {
              Object RESULT =null;
		int lcond1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcond1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lcond1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oplval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcond2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcond2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lcond2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Elemento> lcon1 = (ArrayList<Elemento>) lcond1;
        Elemento oplv = (Elemento) oplval;
        lcon1.add(oplv);
        ArrayList<Elemento> lcon2 = (ArrayList<Elemento>) lcond2;
        lcon1.addAll(lcon2);
        RESULT = lcon1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LCOND ::= COND 
            {
              Object RESULT =null;
		int condvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object condval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Elemento> condv = (ArrayList<Elemento>)condval;
            ArrayList<Elemento> l = new ArrayList();
            l.addAll(condv);
            RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCOND ::= op_not COND 
            {
              Object RESULT =null;
		int condvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object condval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Elemento no = new Elemento("not","sin_tipo");
                ArrayList<Elemento> condv = (ArrayList<Elemento>)condval;
                ArrayList<Elemento> l = new ArrayList();
                l.add(no);
                l.addAll(condv);
                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPL ::= op_or_doble 
            {
              Object RESULT =null;
		
        Elemento e = new Elemento("or","sin_tipo");
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPL ::= op_and_doble 
            {
              Object RESULT =null;
		
            Elemento e = new Elemento("and","sin_tipo");
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oprval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Elemento> lista = new ArrayList();
        ArrayList<Elemento> exp = (ArrayList<Elemento>) exp1;
        lista.addAll(exp);
        Elemento opr = (Elemento) oprval;
        lista.add(opr);
        exp = (ArrayList<Elemento>) exp2;
        lista.addAll(exp);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPR ::= op_igual_doble 
            {
              Object RESULT =null;
		
            Elemento e = new Elemento("=","sin_tipo");
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPR ::= op_menor 
            {
              Object RESULT =null;
		
                Elemento e = new Elemento("<","sin_tipo");
                RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPR ::= op_mayor 
            {
              Object RESULT =null;
		
                    Elemento e = new Elemento(">","sin_tipo");
                    RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPR ::= op_mayor_igual 
            {
              Object RESULT =null;
		
                        Elemento e = new Elemento(">=","sin_tipo");
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPR ::= op_menor_igual 
            {
              Object RESULT =null;
		
                            Elemento e = new Elemento("<=","sin_tipo");
                            RESULT = e;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
